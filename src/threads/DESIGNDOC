			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Anoop J S <anoop.js@csa.iisc.ernet.in>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

timer.c
-------
struct sleeping_thread -- Used to store all the threads are sleeping currently, along with the number of ticks before which they are awake. A better design would have been to simply include the numbere of ticks in struct thread itself. But that idea didn't come till later.

struct list sleeping_threads_list -- The list containing list_elem members of struct sleeping thread

Inside synch.c
--------------

- void donate(struct thread *from, struct thread*to, struct lock *lock) -- to donate priority from `from` to `to`
- void donate_nest(struct thread *from, struct thread*to, struct lock *lock) -- to donate priority from `from` to `to` and nest onwards.
- withdraw_donation (struct thread *of, struct lock *lock) -- to withdraw donation based on a lock.

Inside synch.h
--------------

struct donate_prioroty -- to store information regarding a donation received
- struct lock *lock -- for which lock donation was received.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

On a call to timer_sleep, interrupt is disabled. The thread along with number of ticks left is stored in sleeping_threads list. And the thread is blocked.

On each call to timer_interrupt, ticks are incremented, and sleeping_thread list is iterated and ticks left of each thread is decremented. If a ticks_left of any thread has reached zero, then that thread is unblocked.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Removed busy wait and replaced with thread_block and thread_unblock calls.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

By disabling the interrupts on begin and enabling it again on end of that function.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Disabling the interrupts in timer_sleep is enough to avoid race condition.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This is the only design I was able to think of.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Inside struct thread
--------------------
- int donated_priority -- store donated priority received from other threads.
- struct thread *donated_by -- store the thread whose donation is currently active.
- struct lock * waiting_for_lock -- stores the lock the thread is currently waiting for.
- struct semaphore * waiting_for_semaphore -- stores the semaphore the thread is waiting for.
- struct list donate_list -- the list of donations that the thread has received.
- struct list_elem sema_elem -- the list_elem used to create list of threads waiting for a sema.

void thread_push_priority -- to push a thread in a thread list based on priority value.
get_thread_priority -- to get priority of a thread passed as argument.
set_thread_priority -- to set the priority of a thread passed as argument.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

The list data structure provided was used to keep track of donatation received.The structure of an invidual elem in list looks like 


struct donate_priority
  {
    struct lock *lock;                      /* lock for which donatation was received */
    unsigned prev_priority;                 /* priority before this donation */
    unsigned donated_priority;              /* donation received */
    struct thread *donating_thread;         /* thread which donated */
    struct thread *prev_donor;              /* donor thread for previous priority */
    struct list_elem elem;                  /* list elem to be used for donate list */
  };


The following scenario appears when P1 tries to acquire a lock held by P2, and P2 is blocked waiting for a lock held by P3.

     -------------------  -----------------
     |                 |  |               |
     |                 v  |               v
|-------|            |-------|       |-------|  
|       |            |       |       |       |
|  P1	|            |  P2   |       |  P3   |             
|_______|            |_______|       |_______|

      P1 donates to P2       P2 donates for P3


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
When a thread is being blocked due to a lock, semaphore or condition variable, it is pushed to the ewaiting list on a location based on it's priority. Thus a thread with highest priority is pushed to the beginning of the list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When lock_acquire is called and that lock was acquired by a blocked thread before, then donate_nest function will be called. donate_nest will use the waiting_for_lock and lock->holder data structures to nest donations till it reaches a thread that is not blocked due to lock_acquire.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release is called, withdraw_donation will be called. It will fetch information from the donate_list to know which all threads have donated for that particular lock, and donations from those threads will be removed and another donation will be activated.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Interrupts are disabled before the threads priority is being set and enabled after it is set.
We cannot use lock to avoid this race, since a potential race condition can occur while accesseing ready_list data structure.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design makes use of more data structures inorder to minimize the execution time required to fetch information that will take iterations.


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
Inside struct thread
--------------------
- int nice -- to store the nice value of that thread.
- fixed_point recept_cpu -- to store the recent cpu value of that thread.

fixed_point load_avg -- to store the load average of the system.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   63  61  59	A
 4     4   0   0   62  61  59	A
 8     8   0   0   61  61  59	B
12     8   4   0   61  60  59	A
16     12  4   0   60  60  59	B
20     12  8   0   60  59  59	A
24     16  8   0   59  59  59	C
28     16  8   4   59  59  58	B
32     16  12  4   59  58  58	A
36     20  12  4   58  58  58   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Ambiguity regarding which among threads with same highest priority will be chosen. But it is documented that a fair round robin mechanism is used. Therefore the thread which ran recently will be given a chance later.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

We should try to minimize the time spent between the interrupt context, since execution between two timer ticks should not be spent largely to execute interrupt handlers. Threads should be given enough time so their performance does not degrade.


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

My design makes use of existing codce infrastruct provided like lists, it's operations etc.
If I was given more time, I would optimize the code that is run between interrupt contexts, especially the code that calculates priority and recept_cpu values.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

I implemented fixed-point with typedef int fixed-point. Also a series of inline function to operate on fixed-point was implemented. I reserved 14 bits for decimal part. The number of bits for decimal part can be easily modified by just modifying the macro 'Q'.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
